// Generated by Apple Swift version 3.1 (swiftlang-802.0.48 clang-802.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import Foundation;
@import AppKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSBundle;

/// Represents a decoded APNG image.
/// You can use instance of this class to get image information or display it on screen with <code>APNGImageView</code>.
/// <code>APNGImage</code> can hold an APNG image or a regular PNG image. If latter, there will be only one frame in the image.
SWIFT_CLASS("_TtC7APNGKit9APNGImage")
@interface APNGImage : NSObject
/// Size of the image in point. The scale factor is considered.
@property (nonatomic, readonly) CGSize size;
/// Scale of the image.
@property (nonatomic, readonly) CGFloat scale;
/// Repeat count of animation of the APNG image.
/// It is read from APNG data. However, you can change it to modify the loop behaviors.
/// Set this to <code>RepeatForever</code> will make the animation loops forever.
@property (nonatomic) NSInteger repeatCount;
/// The count of frames in this APNG image.
/// The value of it for a single plain PNG file would be 1.
@property (nonatomic, readonly) NSInteger frameCount;
/// Returns the image object associated with the specified filename.
/// This method looks in the APNGKit caches for an image object with the specified name and returns a new object with same data if it exists.
/// If a matching image object is not already in the cache, this method locates and loads the image data from disk, and then returns the resulting object.
/// You can not assume that this method is thread safe. If the screen has a scale larger than 1.0, this method first searches for an image file with the
/// same filename with a responding suffix (@2x or @3x) appended to it. For example, if the file’s name is button, it first searches for button@2x.
/// If it finds a 2x, it loads that image and sets the scale property of the returned UIImage object to 2.0. Otherwise, it loads the unmodified filename
/// and sets the scale property to 1.0.
/// note:
/// This method will cache the result image in APNGKit cache system to improve performance.
/// Images in Asset Category is not supported, you can only load files from the app’s main bundle.
/// note:
/// The image file should not be compressed by Xcode. By default, Xcode will compress PNG files in the app bundle by using a private pngcrush
/// version, which will opt-out all frames data except the first frame from the APNG image. You should change your APNG file extension to “apng”
/// (or anything besides “png”) or just turn off the PNG compression in Xcode build settings to avoid this.
/// \param imageName The name of the file. If this is the first time the image is being loaded,
/// the method looks for an image with the specified name in the application’s main bundle.
///
/// \param progressive When set to true, only the current frame will be loaded. This could free up memory
/// that are not current displayed, but will take more performance to load the needed frame
/// when it is about to be displayed. Otherwise, all frames will be loaded once. Default is <code>false</code>.
///
/// \param bundle The bundle in which APNGKit should search for the image name.
///
///
/// returns:
/// The image object for the specified file, or nil if the method could not find the specified image.
- (nullable instancetype)initWithNamed:(NSString * _Nonnull)imageName progressive:(BOOL)progressive in:(NSBundle * _Nonnull)bundle;
/// Creates and returns an image object by loading the image data from the file at the specified path.
/// note:
/// This method does not cache the image object by default.
/// But it is recommended to enable the cache to improve performance,
/// especially if you have multiple same APNG image to show at the same time.
/// note:
/// The image file should not be compressed by Xcode. By default, Xcode will compress PNG files in the app bundle by using a private pngcrush
/// version, which will opt-out all frames data except the first frame from the APNG image. You should change your APNG file extension to “apng”
/// (or anything besides “png”) or just turn off the PNG compression in Xcode build settings to avoid this.
/// \param path The path to the file.
///
/// \param saveToCache Should the result image saved to APNGKit memory caches. Default is false. Only works when <code>progressive</code> is <code>false</code>.
///
/// \param progressive When set to true, only the current frame will be loaded. This could free up memory
/// that are not current displayed, but will take more performance to load the needed frame
/// when it is about to be displayed. Otherwise, all frames will be loaded once. Default is <code>false</code>.
///
///
/// returns:
/// A new image object for the specified file, or nil if the method could not initialize the image from the specified file.
- (nullable instancetype)initWithContentsOfFile:(NSString * _Nonnull)path saveToCache:(BOOL)saveToCache progressive:(BOOL)progressive;
/// Creates and returns an image object that uses the specified image data.
/// The scale factor will always be 1.0 if you create the image from data with this method.
/// If you need an image at a specified scale, use init methods from disk or -initWithData:scale: instead
/// note:
/// This method does not cache the image object.
/// \param data The image data of APNG. This can be data from a file or data you get from network.
///
///
/// returns:
/// A new image object for the specified data, or nil if the method could not initialize the image from the specified data.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data progressive:(BOOL)progressive;
/// Creates and returns an image object that uses the specified image data and scale factor.
/// note:
/// This method does not cache the image object.
/// \param data The image data of APNG. This can be data from a file or data you get from network.
///
/// \param scale The scale factor to use when interpreting the image data. Specifying a scale factor of 1.0 results in
/// an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor
/// changes the size of the image as reported by the size property.
///
/// \param progressive When set to true, only the current frame will be loaded. This could free up memory
/// that are not current displayed, but will take more performance to load the needed frame
/// when it is about to be displayed. Otherwise, all frames will be loaded once. Default is <code>false</code>.
///
///
/// returns:
/// A new image object for the specified data, or nil if the method could not initialize the image from the specified data.
- (nullable instancetype)initWithData:(NSData * _Nonnull)data scale:(CGFloat)scale progressive:(BOOL)progressive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface APNGImage (SWIFT_EXTENSION(APNGKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface APNGImage (SWIFT_EXTENSION(APNGKit))
@end

@protocol APNGImageViewDelegate;
@class NSCoder;

/// An APNG image view object provides a view-based container for displaying an APNG image.
/// You can control the starting and stopping of the animation, as well as the repeat count.
/// All images associated with an APNGImageView object should use the same scale.
/// If your application uses images with different scales, they may render incorrectly.
SWIFT_CLASS("_TtC7APNGKit13APNGImageView")
@interface APNGImageView : NSView
/// The image displayed in the image view.
/// If you change the image when the animation playing,
/// the animation of original image will stop, and the new one will start automatically.
@property (nonatomic, strong) APNGImage * _Nullable image;
/// A Bool value indicating whether the animation is running.
@property (nonatomic, readonly) BOOL isAnimating;
/// A Bool value indicating whether the animation should be
/// started automatically after an image is set. Default is false.
@property (nonatomic) BOOL autoStartAnimation;
/// If true runs animation timer with option <code>NSRunLoopCommonModes</code>.
/// ScrollView(CollectionView, TableView) items with Animated APNGImageView will not freeze during scrolling
/// note:
/// This may decrease scrolling smoothness with lot’s of animations
@property (nonatomic) BOOL allowAnimationInScrollView;
@property (nonatomic, weak) id <APNGImageViewDelegate> _Nullable delegate;
/// Initialize an APNG image view with the specified image.
/// note:
/// This method adjusts the frame of the receiver to match the
/// size of the specified image. It also disables user interactions
/// for the image view by default.
/// The first frame of image (default image) will be displayed.
/// \param image The initial APNG image to display in the image view.
///
///
/// returns:
/// An initialized image view object.
- (nonnull instancetype)initWithImage:(APNGImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
/// Initialize an APNG image view with a decoder.
/// note:
/// You should never call this init method from your code.
/// \param aDecoder A decoder used to decode the view from nib.
///
///
/// returns:
/// An initialized image view object.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Starts animation contained in the image.
- (void)startAnimating;
/// Starts animation contained in the image.
- (void)stopAnimating;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP7APNGKit21APNGImageViewDelegate_")
@protocol APNGImageViewDelegate
@optional
- (void)apngImageView:(APNGImageView * _Nonnull)imageView didFinishPlaybackForRepeatedCount:(NSInteger)count;
@end

#pragma clang diagnostic pop
